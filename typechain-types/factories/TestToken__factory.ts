/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { TestToken, TestTokenInterface } from "../TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "minter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_minter",
        type: "address",
      },
    ],
    name: "setMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620020e2380380620020e283398181016040528101906200003791906200031b565b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816004908051906020019062000090929190620000ce565b508060059080519060200190620000a9929190620000ce565b506012600360006101000a81548160ff021916908360ff160217905550505062000405565b828054620000dc90620003cf565b90600052602060002090601f0160209004810192826200010057600085556200014c565b82601f106200011b57805160ff19168380011785556200014c565b828001600101855582156200014c579182015b828111156200014b5782518255916020019190600101906200012e565b5b5090506200015b91906200015f565b5090565b5b808211156200017a57600081600090555060010162000160565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001e7826200019c565b810181811067ffffffffffffffff82111715620002095762000208620001ad565b5b80604052505050565b60006200021e6200017e565b90506200022c8282620001dc565b919050565b600067ffffffffffffffff8211156200024f576200024e620001ad565b5b6200025a826200019c565b9050602081019050919050565b60005b83811015620002875780820151818401526020810190506200026a565b8381111562000297576000848401525b50505050565b6000620002b4620002ae8462000231565b62000212565b905082815260208101848484011115620002d357620002d262000197565b5b620002e084828562000267565b509392505050565b600082601f8301126200030057620002ff62000192565b5b8151620003128482602086016200029d565b91505092915050565b6000806040838503121562000335576200033462000188565b5b600083015167ffffffffffffffff8111156200035657620003556200018d565b5b6200036485828601620002e8565b925050602083015167ffffffffffffffff8111156200038857620003876200018d565b5b6200039685828601620002e8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003e857607f821691505b60208210811415620003ff57620003fe620003a0565b5b50919050565b611ccd80620004156000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146102b1578063a9059cbb146102e1578063dd62ed3e14610311578063fca3b5aa1461034157610100565b806370a08231146102295780638da5cb5b1461025957806395d89b41146102775780639dc29fac1461029557610100565b806323b872dd116100d357806323b872dd1461018f578063313ce567146101bf57806339509351146101dd57806340c10f191461020d57610100565b806306fdde03146101055780630754617214610123578063095ea7b31461014157806318160ddd14610171575b600080fd5b61010d61035d565b60405161011a91906112f5565b60405180910390f35b61012b6103ef565b6040516101389190611358565b60405180910390f35b61015b600480360381019061015691906113da565b610415565b6040516101689190611435565b60405180910390f35b610179610438565b604051610186919061145f565b60405180910390f35b6101a960048036038101906101a4919061147a565b610442565b6040516101b69190611435565b60405180910390f35b6101c7610471565b6040516101d491906114e9565b60405180910390f35b6101f760048036038101906101f291906113da565b610488565b6040516102049190611435565b60405180910390f35b610227600480360381019061022291906113da565b6104bf565b005b610243600480360381019061023e9190611504565b610610565b604051610250919061145f565b60405180910390f35b610261610658565b60405161026e9190611358565b60405180910390f35b61027f61067e565b60405161028c91906112f5565b60405180910390f35b6102af60048036038101906102aa91906113da565b610710565b005b6102cb60048036038101906102c691906113da565b610861565b6040516102d89190611435565b60405180910390f35b6102fb60048036038101906102f691906113da565b6108d8565b6040516103089190611435565b60405180910390f35b61032b60048036038101906103269190611531565b6108fb565b604051610338919061145f565b60405180910390f35b61035b60048036038101906103569190611504565b610982565b005b60606004805461036c906115a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610398906115a0565b80156103e55780601f106103ba576101008083540402835291602001916103e5565b820191906000526020600020905b8154815290600101906020018083116103c857829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610420610a56565b905061042d818585610a5e565b600191505092915050565b6000600254905090565b60008061044d610a56565b905061045a858285610c29565b610465858585610cb5565b60019150509392505050565b6000600360009054906101000a900460ff16905090565b600080610493610a56565b90506104b48185856104a585896108fb565b6104af9190611601565b610a5e565b600191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561056b5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806105c35750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f9906116a3565b60405180910390fd5b61060c8282610f2d565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606005805461068d906115a0565b80601f01602080910402602001604051908101604052809291908181526020018280546106b9906115a0565b80156107065780601f106106db57610100808354040283529160200191610706565b820191906000526020600020905b8154815290600101906020018083116106e957829003601f168201915b5050505050905090565b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156107bc5750600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806108145750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a906116a3565b60405180910390fd5b61085d8282611084565b5050565b60008061086c610a56565b9050600061087a82866108fb565b9050838110156108bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b690611735565b60405180910390fd5b6108cc8286868403610a5e565b60019250505092915050565b6000806108e3610a56565b90506108f0818585610cb5565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a09906117a1565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac590611833565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b35906118c5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610c1c919061145f565b60405180910390a3505050565b6000610c3584846108fb565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610caf5781811015610ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9890611931565b60405180910390fd5b610cae8484848403610a5e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c906119c3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8c90611a55565b60405180910390fd5b610da0838383611252565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1d90611ae7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f14919061145f565b60405180910390a3610f27848484611257565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9490611b53565b60405180910390fd5b610fa960008383611252565b8060026000828254610fbb9190611601565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161106c919061145f565b60405180910390a361108060008383611257565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110eb90611be5565b60405180910390fd5b61110082600083611252565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117d90611c77565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611239919061145f565b60405180910390a361124d83600084611257565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561129657808201518184015260208101905061127b565b838111156112a5576000848401525b50505050565b6000601f19601f8301169050919050565b60006112c78261125c565b6112d18185611267565b93506112e1818560208601611278565b6112ea816112ab565b840191505092915050565b6000602082019050818103600083015261130f81846112bc565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061134282611317565b9050919050565b61135281611337565b82525050565b600060208201905061136d6000830184611349565b92915050565b600080fd5b61138181611337565b811461138c57600080fd5b50565b60008135905061139e81611378565b92915050565b6000819050919050565b6113b7816113a4565b81146113c257600080fd5b50565b6000813590506113d4816113ae565b92915050565b600080604083850312156113f1576113f0611373565b5b60006113ff8582860161138f565b9250506020611410858286016113c5565b9150509250929050565b60008115159050919050565b61142f8161141a565b82525050565b600060208201905061144a6000830184611426565b92915050565b611459816113a4565b82525050565b60006020820190506114746000830184611450565b92915050565b60008060006060848603121561149357611492611373565b5b60006114a18682870161138f565b93505060206114b28682870161138f565b92505060406114c3868287016113c5565b9150509250925092565b600060ff82169050919050565b6114e3816114cd565b82525050565b60006020820190506114fe60008301846114da565b92915050565b60006020828403121561151a57611519611373565b5b60006115288482850161138f565b91505092915050565b6000806040838503121561154857611547611373565b5b60006115568582860161138f565b92505060206115678582860161138f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806115b857607f821691505b602082108114156115cc576115cb611571565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061160c826113a4565b9150611617836113a4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561164c5761164b6115d2565b5b828201905092915050565b7f216f6e6c794d696e746572000000000000000000000000000000000000000000600082015250565b600061168d600b83611267565b915061169882611657565b602082019050919050565b600060208201905081810360008301526116bc81611680565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061171f602583611267565b915061172a826116c3565b604082019050919050565b6000602082019050818103600083015261174e81611712565b9050919050565b7f216f6e6c794f776e657200000000000000000000000000000000000000000000600082015250565b600061178b600a83611267565b915061179682611755565b602082019050919050565b600060208201905081810360008301526117ba8161177e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061181d602483611267565b9150611828826117c1565b604082019050919050565b6000602082019050818103600083015261184c81611810565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006118af602283611267565b91506118ba82611853565b604082019050919050565b600060208201905081810360008301526118de816118a2565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061191b601d83611267565b9150611926826118e5565b602082019050919050565b6000602082019050818103600083015261194a8161190e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006119ad602583611267565b91506119b882611951565b604082019050919050565b600060208201905081810360008301526119dc816119a0565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611a3f602383611267565b9150611a4a826119e3565b604082019050919050565b60006020820190508181036000830152611a6e81611a32565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611ad1602683611267565b9150611adc82611a75565b604082019050919050565b60006020820190508181036000830152611b0081611ac4565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611b3d601f83611267565b9150611b4882611b07565b602082019050919050565b60006020820190508181036000830152611b6c81611b30565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bcf602183611267565b9150611bda82611b73565b604082019050919050565b60006020820190508181036000830152611bfe81611bc2565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c61602283611267565b9150611c6c82611c05565b604082019050919050565b60006020820190508181036000830152611c9081611c54565b905091905056fea26469706673582212200f9ce9a33686edeb53d5fc69228c3daab2cd0429784c0a72ea997425bda548bb64736f6c63430008090033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestToken> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<TestToken>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  override connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
